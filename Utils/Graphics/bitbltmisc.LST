Turbo Assembler	 Version 5.0	    03-10-98 19:28:36	    Page 1
E:\JRG\Source\Utils\Graphics\bitbltmisc.asm



      1								 PAGE	 255, 255
      2
      3								 PUBLIC	 FlipVertical
      4								 PUBLIC	 BltInjectChannel32
      5								 PUBLIC	 BltExtractChannel32
      6								 PUBLIC	 BltInjectChannel24
      7								 PUBLIC	 BltExtractChannel24
      8
      9								 INCLUDE bitblt.inc
1    10					 IFNDEF	??version
1    11								 ; We must be using MASM or something, let's do	nothing	here!!
1    12					 ELSE
1    13								 ; ??version is	defined	by TASM, so we should use the LOCALS directive:
1    14								 LOCALS	 @@
1    15								 NOSMART
1    16					 ENDIF
1    17
1    18		  = 00ffffffh		 mskColorKey		 equ	 00ffffffh
1    19
1    20					 AlignTo		 macro	 AlignSize:REQ
1    21
1    22								 ; ( $ + AlignSize - 1 ) and not (AlignSize - 1)
1    23
1    24								 endm
1    25
1    26					 BltOpaque		 macro	 BltLoop:REQ, Param1, Param2, InitCode
1    27
1    28								 or	 ecx, ecx	  ; aWidth = 0?
1    29								 jz	 @@Exit
1    30								 cmp	 aHeight, 0	  ; aHeight = 0?
1    31								 je	 @@Exit
1    32
1    33								 mov	 edi, edx
1    34								 mov	 esi, eax
1    35
1    36								 sub	 WidthSource, ecx ; bias these
1    37								 sub	 WidthDest, ecx
1    38								 mov	 PixelCount, ecx
1    39								 InitCode
1    40						 @@LoopY:
1    41								 BltLoop Param1, Param2
1    42								 add	 esi, WidthSource
1    43								 add	 edi, WidthDest
1    44								 dec	 aHeight	   ; line counter
1    45								 jnz	 @@LoopY
1    46
1    47								 endm
1    48
1    49					 BltInit8		 macro
1    50
1    51								 or	 ecx, ecx			 ; aWidth = 0?
1    52								 jz	 @@Exit
1    53								 cmp	 aHeight, 0			 ; aHeight = 0?
1    54								 je	 @@Exit
1    55
1    56								 mov	 edi, edx
1    57								 mov	 esi, eax
1    58
1    59								 mov	 PixelCount, ecx		 ; save	this for later
1    60								 sub	 WidthSource, ecx		 ; bias	these
1    61								 sub	 WidthDest, ecx
1    62
1    63								 xor	 eax, eax
1    64								 mov	 dl, byte ptr Transparent
1    65
1    66								 endm
1    67
1    68					 ; The idea here is to not branch very often so	we unroll the loop by four
1    69					 ; and try to not branch when a	whole run of pixels is either transparent
1    70					 ; or not transparent.
1    71					 ;
1    72					 ; There are two loops.	One loop is for	a run of pixels	equal to the
1    73					 ; transparent color, the other	is for runs of pixels we need to store.
1    74					 ;
1    75					 ; When	we detect a "bad" pixel	we jump	to the same position in	the
1    76					 ; other loop.
1    77					 ;
1    78					 ; Here	is the loop we will stay in as long as we encounter a "transparent"
1    79					 ; pixel in the	source.
1    80
1    81					 BltTrans8		 macro	 BltWrite:REQ, DestWidth:REQ
1    82
1    83						 @@MoreLines:
1    84								 mov	 ecx, PixelCount  ; ECX	is pixel counter
1    85								 shr	 ecx, 2
1    86								 jz	 @@NextScan
1    87
1    88								 AlignTo 16
1    89						 @@Same:
1    90								 mov	 al, [esi]
1    91								 cmp	 al, dl
1    92								 jne	 @@Diff0
1    93						 @@Same0:
1    94								 mov	 al, [esi + 1]
1    95								 cmp	 al, dl
1    96								 jne	 @@Diff1
1    97						 @@Same1:
1    98								 mov	 al, [esi + 2]
1    99								 cmp	 al, dl
1   100								 jne	 @@Diff2
1   101						 @@Same2:
1   102								 mov	 al, [esi + 3]
1   103								 cmp	 al, dl
1   104								 jne	 @@Diff3
1   105						 @@Same3:
1   106								 add	 edi, DestWidth	* 4
1   107								 add	 esi, 4
1   108								 dec	 ecx
1   109								 jnz	 @@Same
1   110								 jmp	 @@NextScan
1   111
1   112								 AlignTo 16
1   113						 @@Diff:
1   114								 mov	 al, [esi]
1   115								 cmp	 al, dl
1   116								 je	 @@Same0
1   117						 @@Diff0:
1   118								 BltWrite 0
1   119								 mov	 al, [esi + 1]
1   120								 cmp	 al, dl
1   121								 je	 @@Same1
1   122						 @@Diff1:
1   123								 BltWrite 1
1   124								 mov	 al, [esi + 2]
1   125								 cmp	 al, dl
1   126								 je	 @@Same2
1   127						 @@Diff2:
1   128								 BltWrite 2
1   129								 mov	 al, [esi + 3]
1   130								 cmp	 al, dl
1   131								 je	 @@Same3
1   132						 @@Diff3:
1   133								 BltWrite 3
1   134
1   135								 add	 edi, DestWidth	* 4
1   136								 add	 esi, 4
1   137								 dec	 ecx
1   138								 jnz	 @@Diff
1   139
1   140						 @@NextScan:
1   141								 mov	 ecx, PixelCount
1   142								 and	 ecx, 11b
1   143								 jz	 @@NextScan1			 ; move	on to the start	of the next line
1   144
1   145						 @@OddLoop:
1   146								 mov	 al, [esi]
1   147						 IF DestWidth EQ 1
1   148								 inc	 edi
1   149						 ELSE
1   150								 add	 edi, DestWidth
1   151						 ENDIF
1   152								 inc	 esi
1   153								 cmp	 al, dl
1   154								 je	 @@OddCont
1   155								 BltWrite -1
1   156						 @@OddCont:
1   157								 dec	 ecx
1   158								 jnz	 @@OddLoop
1   159						 @@NextScan1:
1   160								 add	 esi, WidthSource
1   161								 add	 edi, WidthDest
1   162
1   163								 dec	 aHeight			 ; line	counter
1   164								 jnz	 @@MoreLines
1   165
1   166								 endm
1   167
1   168								 .586p
1   169	00000000						 .MODEL	FLAT
1   170
1   171	00000000						 .CODE
1   172
    173
    174	00000000			 FlipVertical		 PROC PASCAL USES ESI EDI, \ ; Source :	ptr byte, aWidth, aHeight : dword,
    175								     WidthSource : dword
    176					 ;
    177					 ;     On entry:
    178					 ;
    179					 ;     EAX: Source
    180					 ;     EDX: aWidth
    181					 ;     ECX: aHeight
    182					 ;
    183
    184								 LOCAL	 DwordCount : dword
    185
1   186	00000000  C8 0004 00			 ENTERD	 00004h,0
1   187	00000004  56				 PUSH	 ESI
1   188	00000005  57				 PUSH	 EDI
1   189	00000006  87 CA						 xchg	 ecx, edx
    190
    191	00000008  0B C9						 or	 ecx, ecx	  ; aWidth = 0?
    192	0000000A  74 57	90 90 90 90				 jz	 @@exit
    193	00000010  0B D2						 or	 edx, edx	  ; aHeight = 0?
    194	00000012  74 4F	90 90 90 90				 jz	 @@exit
    195
    196	00000018  8B F0						 mov	 esi, eax
    197	0000001A  8B FA						 mov	 edi, edx
    198	0000001C  8B C2						 mov	 eax, edx
    199	0000001E  48						 dec	 eax
    200	0000001F  F7 65	08					 mul	 WidthSource
    201	00000022  8B D7						 mov	 edx, edi
    202	00000024  03 C6						 add	 eax, esi
    203	00000026  8B F8						 mov	 edi, eax
    204
    205	00000028  01 4D	08					 add	 WidthSource, ecx
    206	0000002B  89 4D	FC					 mov	 DwordCount, ecx
    207
    208	0000002E				 @@LoopY:
    209	0000002E  8B 4D	FC					 mov	 ecx, DwordCount
    210	00000031  C1 E9	02					 shr	 ecx, 2
    211
    212	00000034				 @@LoopX:
    213	00000034  8B 06						 mov	 eax, [esi]
    214	00000036  87 07						 xchg	 eax, [edi]
    215	00000038  89 06						 mov	 [esi],	eax
    216	0000003A  83 C7	04					 add	 edi, 4
    217	0000003D  83 C6	04					 add	 esi, 4
    218	00000040  49						 dec	 ecx
    219	00000041  75 F1						 jnz	 @@LoopX
    220
    221	00000043  8B 4D	FC					 mov	 ecx, DwordCount
    222	00000046  81 E1	00000003				 and	 ecx, 11b
    223	0000004C  74 0F	90 90 90 90				 jz	 @@cont
    224
    225	00000052				 @@LoopRest:
    226	00000052  8A 06						 mov	 al, [esi]
    227	00000054  86 07						 xchg	 al, [edi]
    228	00000056  88 06						 mov	 [esi],	al
    229	00000058  47						 inc	 edi
    230	00000059  46						 inc	 esi
    231	0000005A  49						 dec	 ecx
    232	0000005B  75 F5						 jnz	 @@LoopRest
    233
    234	0000005D				 @@Cont:
    235	0000005D  2B 7D	08					 sub	 edi, WidthSource
    236
    237	00000060  4A						 dec	 edx
    238	00000061  75 CB						 jnz	 @@LoopY
    239
    240	00000063				 @@Exit:
1   241	00000063  5F				 POP	 EDI
1   242	00000064  5E				 POP	 ESI
1   243	00000065  C9				 LEAVED
1   244	00000066  C2 0004			 RET	 00004h
    245
    246	00000069			 FlipVertical		 ENDP
    247
    248					 ; >>>>>>>>>>>>>>>>>>>>	Channel	blts >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    249
    250					 BltLoopCopyChannel	 macro	 SourceGap:REQ,	DestGap:REQ
Turbo Assembler	 Version 5.0	    03-10-98 19:28:36	    Page 2
E:\JRG\Source\Utils\Graphics\bitbltmisc.asm



    251
    252								 mov	 ecx, PixelCount
    253								 shr	 ecx, 2
    254						 @@LoopX:
    255								 mov	 al, [esi + 0 *	SourceGap]
    256								 mov	 bl, [esi + 1 *	SourceGap]
    257								 mov	 [edi +	0 * DestGap], al
    258								 mov	 [edi +	1 * DestGap], bl
    259								 mov	 al, [esi + 2 *	SourceGap]
    260								 mov	 al, [esi + 3 *	SourceGap]
    261								 mov	 [edi +	2 * DestGap], al
    262								 mov	 [edi +	3 * DestGap], bl
    263
    264								 add	 esi, SourceGap	* 4
    265								 add	 edi, DestGap *	4
    266								 dec	 ecx
    267								 jz	 @@LoopX
    268								 jmp	 @@TestRest
    269
    270								 AlignTo 16
    271						 @@LoopRest:
    272								 mov	 al, [esi]
    273								 mov	 [edi],	al
    274								 add	 esi, SourceGap
    275								 add	 edi, DestGap
    276								 dec	 ecx
    277								 jz	 @@LoopRest
    278								 jmp	 @@Cont
    279
    280						 @@TestRest:
    281								 mov	 ecx, PixelCount
    282								 and	 ecx, 11b
    283								 jz	 @@Cont
    284						 @@Cont:
    285								 endm
    286
    287	00000069			 BltInjectChannel24	 PROC PASCAL USES EBX ESI EDI, \ ; Source, Dest	: ptr byte, aWidth,
    288								    aHeight : dword, WidthSource, WidthDest : dword
    289					 ;
    290					 ;     On entry:
    291					 ;
    292					 ;     EAX: Source
    293					 ;     EDX: Dest
    294					 ;     ECX: aWidth
    295					 ;
    296								 LOCAL	 PixelCount : dword
    297
    298								 BltOpaque BltLoopCopyChannel, 1, 3
1   299
2   300	00000069  C8 0004 00			 ENTERD	 00004h,0
2   301	0000006D  53				 PUSH	 EBX
2   302	0000006E  56				 PUSH	 ESI
2   303	0000006F  57				 PUSH	 EDI
2   304	00000070  0B C9						 or	 ecx, ecx	  ; aWidth = 0?
1   305	00000072  74 71	90 90 90 90				 jz	 @@Exit
1   306	00000078  83 7D	10 00					 cmp	 aHeight, 0	  ; aHeight = 0?
1   307	0000007C  74 67	90 90 90 90				 je	 @@Exit
1   308
1   309	00000082  8B FA						 mov	 edi, edx
1   310	00000084  8B F0						 mov	 esi, eax
1   311
1   312	00000086  29 4D	0C					 sub	 WidthSource, ecx ; bias these
1   313	00000089  29 4D	08					 sub	 WidthDest, ecx
1   314	0000008C  89 4D	FC					 mov	 PixelCount, ecx
1   315
1   316	0000008F				 @@LoopY:
1   317								 BltLoopCopyChannel 1, 3
2   318
2   319	0000008F  8B 4D	FC					 mov	 ecx, PixelCount
2   320	00000092  C1 E9	02					 shr	 ecx, 2
2   321	00000095				 @@LoopX:
2   322	00000095  8A 06						 mov	 al, [esi + 0 *	1]
2   323	00000097  8A 5E	01					 mov	 bl, [esi + 1 *	1]
2   324	0000009A  88 07						 mov	 [edi +	0 * 3],	al
2   325	0000009C  88 5F	03					 mov	 [edi +	1 * 3],	bl
2   326	0000009F  8A 46	02					 mov	 al, [esi + 2 *	1]
2   327	000000A2  8A 46	03					 mov	 al, [esi + 3 *	1]
2   328	000000A5  88 47	06					 mov	 [edi +	2 * 3],	al
2   329	000000A8  88 5F	09					 mov	 [edi +	3 * 3],	bl
2   330
2   331	000000AB  83 C6	04					 add	 esi, 1	* 4
2   332	000000AE  83 C7	0C					 add	 edi, 3	* 4
2   333	000000B1  49						 dec	 ecx
2   334	000000B2  74 E1						 jz	 @@LoopX
2   335	000000B4  EB 15	90 90 90				 jmp	 @@TestRest
2   336
2   337								 AlignTo 16
3   338
3   339								 ; ( $ + 16 - 1	) and not (16 -	1)
3   340
2   341	000000B9				 @@LoopRest:
2   342	000000B9  8A 06						 mov	 al, [esi]
2   343	000000BB  88 07						 mov	 [edi],	al
2   344	000000BD  83 C6	01					 add	 esi, 1
2   345	000000C0  83 C7	03					 add	 edi, 3
2   346	000000C3  49						 dec	 ecx
2   347	000000C4  74 F3						 jz	 @@LoopRest
2   348	000000C6  EB 12	90 90 90				 jmp	 @@Cont
2   349
2   350	000000CB				 @@TestRest:
2   351	000000CB  8B 4D	FC					 mov	 ecx, PixelCount
2   352	000000CE  81 E1	00000003				 and	 ecx, 11b
2   353	000000D4  74 04	90 90 90 90				 jz	 @@Cont
2   354	000000DA				 @@Cont:
1   355	000000DA  03 75	0C					 add	 esi, WidthSource
1   356	000000DD  03 7D	08					 add	 edi, WidthDest
1   357	000000E0  FF 4D	10					 dec	 aHeight	   ; line counter
1   358	000000E3  75 AA						 jnz	 @@LoopY
1   359
    360	000000E5				 @@Exit:
1   361	000000E5  5F				 POP	 EDI
1   362	000000E6  5E				 POP	 ESI
1   363	000000E7  5B				 POP	 EBX
1   364	000000E8  C9				 LEAVED
1   365	000000E9  C2 000C			 RET	 0000Ch
    366
    367	000000EC			 BltInjectChannel24	 ENDP
    368
    369	000000EC			 BltExtractChannel24	 PROC PASCAL USES EBX ESI EDI, \ ; Source, Dest	: ptr byte, aWidth,
    370								    aHeight : dword, WidthSource, WidthDest : dword
    371					 ;
    372					 ;     On entry:
    373					 ;
    374					 ;     EAX: Source
    375					 ;     EDX: Dest
    376					 ;     ECX: aWidth
    377					 ;
    378								 LOCAL	 PixelCount : dword
    379
    380								 BltOpaque BltLoopCopyChannel, 3, 1
1   381
2   382	000000EC  C8 0004 00			 ENTERD	 00004h,0
2   383	000000F0  53				 PUSH	 EBX
2   384	000000F1  56				 PUSH	 ESI
2   385	000000F2  57				 PUSH	 EDI
2   386	000000F3  0B C9						 or	 ecx, ecx	  ; aWidth = 0?
1   387	000000F5  74 71	90 90 90 90				 jz	 @@Exit
1   388	000000FB  83 7D	10 00					 cmp	 aHeight, 0	  ; aHeight = 0?
1   389	000000FF  74 67	90 90 90 90				 je	 @@Exit
1   390
1   391	00000105  8B FA						 mov	 edi, edx
1   392	00000107  8B F0						 mov	 esi, eax
1   393
1   394	00000109  29 4D	0C					 sub	 WidthSource, ecx ; bias these
1   395	0000010C  29 4D	08					 sub	 WidthDest, ecx
1   396	0000010F  89 4D	FC					 mov	 PixelCount, ecx
1   397
1   398	00000112				 @@LoopY:
1   399								 BltLoopCopyChannel 3, 1
2   400
2   401	00000112  8B 4D	FC					 mov	 ecx, PixelCount
2   402	00000115  C1 E9	02					 shr	 ecx, 2
2   403	00000118				 @@LoopX:
2   404	00000118  8A 06						 mov	 al, [esi + 0 *	3]
2   405	0000011A  8A 5E	03					 mov	 bl, [esi + 1 *	3]
2   406	0000011D  88 07						 mov	 [edi +	0 * 1],	al
2   407	0000011F  88 5F	01					 mov	 [edi +	1 * 1],	bl
2   408	00000122  8A 46	06					 mov	 al, [esi + 2 *	3]
2   409	00000125  8A 46	09					 mov	 al, [esi + 3 *	3]
2   410	00000128  88 47	02					 mov	 [edi +	2 * 1],	al
2   411	0000012B  88 5F	03					 mov	 [edi +	3 * 1],	bl
2   412
2   413	0000012E  83 C6	0C					 add	 esi, 3	* 4
2   414	00000131  83 C7	04					 add	 edi, 1	* 4
2   415	00000134  49						 dec	 ecx
2   416	00000135  74 E1						 jz	 @@LoopX
2   417	00000137  EB 15	90 90 90				 jmp	 @@TestRest
2   418
2   419								 AlignTo 16
3   420
3   421								 ; ( $ + 16 - 1	) and not (16 -	1)
3   422
2   423	0000013C				 @@LoopRest:
2   424	0000013C  8A 06						 mov	 al, [esi]
2   425	0000013E  88 07						 mov	 [edi],	al
2   426	00000140  83 C6	03					 add	 esi, 3
2   427	00000143  83 C7	01					 add	 edi, 1
2   428	00000146  49						 dec	 ecx
2   429	00000147  74 F3						 jz	 @@LoopRest
2   430	00000149  EB 12	90 90 90				 jmp	 @@Cont
2   431
2   432	0000014E				 @@TestRest:
2   433	0000014E  8B 4D	FC					 mov	 ecx, PixelCount
2   434	00000151  81 E1	00000003				 and	 ecx, 11b
2   435	00000157  74 04	90 90 90 90				 jz	 @@Cont
2   436	0000015D				 @@Cont:
1   437	0000015D  03 75	0C					 add	 esi, WidthSource
1   438	00000160  03 7D	08					 add	 edi, WidthDest
1   439	00000163  FF 4D	10					 dec	 aHeight	   ; line counter
1   440	00000166  75 AA						 jnz	 @@LoopY
1   441
    442	00000168				 @@Exit:
1   443	00000168  5F				 POP	 EDI
1   444	00000169  5E				 POP	 ESI
1   445	0000016A  5B				 POP	 EBX
1   446	0000016B  C9				 LEAVED
1   447	0000016C  C2 000C			 RET	 0000Ch
    448
    449	0000016F			 BltExtractChannel24	 ENDP
    450
    451	0000016F			 BltInjectChannel32	 PROC PASCAL USES EBX ESI EDI, \ ; Source, Dest	: ptr byte, aWidth,
    452								    aHeight : dword, WidthSource, WidthDest : dword
    453					 ;
    454					 ;     On entry:
    455					 ;
    456					 ;     EAX: Source
    457					 ;     EDX: Dest
    458					 ;     ECX: aWidth
    459					 ;
    460								 LOCAL	 PixelCount : dword
    461
    462								 BltOpaque BltLoopCopyChannel, 1, 4
1   463
2   464	0000016F  C8 0004 00			 ENTERD	 00004h,0
2   465	00000173  53				 PUSH	 EBX
2   466	00000174  56				 PUSH	 ESI
2   467	00000175  57				 PUSH	 EDI
2   468	00000176  0B C9						 or	 ecx, ecx	  ; aWidth = 0?
1   469	00000178  74 71	90 90 90 90				 jz	 @@Exit
1   470	0000017E  83 7D	10 00					 cmp	 aHeight, 0	  ; aHeight = 0?
1   471	00000182  74 67	90 90 90 90				 je	 @@Exit
1   472
1   473	00000188  8B FA						 mov	 edi, edx
1   474	0000018A  8B F0						 mov	 esi, eax
1   475
1   476	0000018C  29 4D	0C					 sub	 WidthSource, ecx ; bias these
1   477	0000018F  29 4D	08					 sub	 WidthDest, ecx
1   478	00000192  89 4D	FC					 mov	 PixelCount, ecx
1   479
1   480	00000195				 @@LoopY:
1   481								 BltLoopCopyChannel 1, 4
2   482
2   483	00000195  8B 4D	FC					 mov	 ecx, PixelCount
2   484	00000198  C1 E9	02					 shr	 ecx, 2
2   485	0000019B				 @@LoopX:
2   486	0000019B  8A 06						 mov	 al, [esi + 0 *	1]
2   487	0000019D  8A 5E	01					 mov	 bl, [esi + 1 *	1]
2   488	000001A0  88 07						 mov	 [edi +	0 * 4],	al
2   489	000001A2  88 5F	04					 mov	 [edi +	1 * 4],	bl
2   490	000001A5  8A 46	02					 mov	 al, [esi + 2 *	1]
2   491	000001A8  8A 46	03					 mov	 al, [esi + 3 *	1]
2   492	000001AB  88 47	08					 mov	 [edi +	2 * 4],	al
2   493	000001AE  88 5F	0C					 mov	 [edi +	3 * 4],	bl
2   494
2   495	000001B1  83 C6	04					 add	 esi, 1	* 4
2   496	000001B4  83 C7	10					 add	 edi, 4	* 4
2   497	000001B7  49						 dec	 ecx
2   498	000001B8  74 E1						 jz	 @@LoopX
2   499	000001BA  EB 15	90 90 90				 jmp	 @@TestRest
2   500
Turbo Assembler	 Version 5.0	    03-10-98 19:28:36	    Page 3
E:\JRG\Source\Utils\Graphics\bitbltmisc.asm



2   501								 AlignTo 16
3   502
3   503								 ; ( $ + 16 - 1	) and not (16 -	1)
3   504
2   505	000001BF				 @@LoopRest:
2   506	000001BF  8A 06						 mov	 al, [esi]
2   507	000001C1  88 07						 mov	 [edi],	al
2   508	000001C3  83 C6	01					 add	 esi, 1
2   509	000001C6  83 C7	04					 add	 edi, 4
2   510	000001C9  49						 dec	 ecx
2   511	000001CA  74 F3						 jz	 @@LoopRest
2   512	000001CC  EB 12	90 90 90				 jmp	 @@Cont
2   513
2   514	000001D1				 @@TestRest:
2   515	000001D1  8B 4D	FC					 mov	 ecx, PixelCount
2   516	000001D4  81 E1	00000003				 and	 ecx, 11b
2   517	000001DA  74 04	90 90 90 90				 jz	 @@Cont
2   518	000001E0				 @@Cont:
1   519	000001E0  03 75	0C					 add	 esi, WidthSource
1   520	000001E3  03 7D	08					 add	 edi, WidthDest
1   521	000001E6  FF 4D	10					 dec	 aHeight	   ; line counter
1   522	000001E9  75 AA						 jnz	 @@LoopY
1   523
    524	000001EB				 @@Exit:
1   525	000001EB  5F				 POP	 EDI
1   526	000001EC  5E				 POP	 ESI
1   527	000001ED  5B				 POP	 EBX
1   528	000001EE  C9				 LEAVED
1   529	000001EF  C2 000C			 RET	 0000Ch
    530
    531	000001F2			 BltInjectChannel32	 ENDP
    532
    533	000001F2			 BltExtractChannel32	 PROC PASCAL USES EBX ESI EDI, \ ; Source, Dest	: ptr byte, aWidth,
    534								    aHeight : dword, WidthSource, WidthDest : dword
    535					 ;
    536					 ;     On entry:
    537					 ;
    538					 ;     EAX: Source
    539					 ;     EDX: Dest
    540					 ;     ECX: aWidth
    541					 ;
    542								 LOCAL	 PixelCount : dword
    543
    544								 BltOpaque BltLoopCopyChannel, 4, 1
1   545
2   546	000001F2  C8 0004 00			 ENTERD	 00004h,0
2   547	000001F6  53				 PUSH	 EBX
2   548	000001F7  56				 PUSH	 ESI
2   549	000001F8  57				 PUSH	 EDI
2   550	000001F9  0B C9						 or	 ecx, ecx	  ; aWidth = 0?
1   551	000001FB  74 71	90 90 90 90				 jz	 @@Exit
1   552	00000201  83 7D	10 00					 cmp	 aHeight, 0	  ; aHeight = 0?
1   553	00000205  74 67	90 90 90 90				 je	 @@Exit
1   554
1   555	0000020B  8B FA						 mov	 edi, edx
1   556	0000020D  8B F0						 mov	 esi, eax
1   557
1   558	0000020F  29 4D	0C					 sub	 WidthSource, ecx ; bias these
1   559	00000212  29 4D	08					 sub	 WidthDest, ecx
1   560	00000215  89 4D	FC					 mov	 PixelCount, ecx
1   561
1   562	00000218				 @@LoopY:
1   563								 BltLoopCopyChannel 4, 1
2   564
2   565	00000218  8B 4D	FC					 mov	 ecx, PixelCount
2   566	0000021B  C1 E9	02					 shr	 ecx, 2
2   567	0000021E				 @@LoopX:
2   568	0000021E  8A 06						 mov	 al, [esi + 0 *	4]
2   569	00000220  8A 5E	04					 mov	 bl, [esi + 1 *	4]
2   570	00000223  88 07						 mov	 [edi +	0 * 1],	al
2   571	00000225  88 5F	01					 mov	 [edi +	1 * 1],	bl
2   572	00000228  8A 46	08					 mov	 al, [esi + 2 *	4]
2   573	0000022B  8A 46	0C					 mov	 al, [esi + 3 *	4]
2   574	0000022E  88 47	02					 mov	 [edi +	2 * 1],	al
2   575	00000231  88 5F	03					 mov	 [edi +	3 * 1],	bl
2   576
2   577	00000234  83 C6	10					 add	 esi, 4	* 4
2   578	00000237  83 C7	04					 add	 edi, 1	* 4
2   579	0000023A  49						 dec	 ecx
2   580	0000023B  74 E1						 jz	 @@LoopX
2   581	0000023D  EB 15	90 90 90				 jmp	 @@TestRest
2   582
2   583								 AlignTo 16
3   584
3   585								 ; ( $ + 16 - 1	) and not (16 -	1)
3   586
2   587	00000242				 @@LoopRest:
2   588	00000242  8A 06						 mov	 al, [esi]
2   589	00000244  88 07						 mov	 [edi],	al
2   590	00000246  83 C6	04					 add	 esi, 4
2   591	00000249  83 C7	01					 add	 edi, 1
2   592	0000024C  49						 dec	 ecx
2   593	0000024D  74 F3						 jz	 @@LoopRest
2   594	0000024F  EB 12	90 90 90				 jmp	 @@Cont
2   595
2   596	00000254				 @@TestRest:
2   597	00000254  8B 4D	FC					 mov	 ecx, PixelCount
2   598	00000257  81 E1	00000003				 and	 ecx, 11b
2   599	0000025D  74 04	90 90 90 90				 jz	 @@Cont
2   600	00000263				 @@Cont:
1   601	00000263  03 75	0C					 add	 esi, WidthSource
1   602	00000266  03 7D	08					 add	 edi, WidthDest
1   603	00000269  FF 4D	10					 dec	 aHeight	   ; line counter
1   604	0000026C  75 AA						 jnz	 @@LoopY
1   605
    606	0000026E				 @@Exit:
1   607	0000026E  5F				 POP	 EDI
1   608	0000026F  5E				 POP	 ESI
1   609	00000270  5B				 POP	 EBX
1   610	00000271  C9				 LEAVED
1   611	00000272  C2 000C			 RET	 0000Ch
    612
    613	00000275			 BltExtractChannel32	 ENDP
    614
    615								 END
Turbo Assembler	 Version 5.0	    03-10-98 19:28:36	    Page 4
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "03-10-98"
??FILENAME			  Text	 "bitbltmi"
??TIME				  Text	 "19:28:36"
??VERSION			  Number 0500
@32BIT				  Text	 1
@@CONT				  Near32 FLAT:005D
@@CONT				  Near32 FLAT:00DA
@@CONT				  Near32 FLAT:015D
@@CONT				  Near32 FLAT:01E0
@@CONT				  Near32 FLAT:0263
@@EXIT				  Near32 FLAT:0063
@@EXIT				  Near32 FLAT:00E5
@@EXIT				  Near32 FLAT:0168
@@EXIT				  Near32 FLAT:01EB
@@EXIT				  Near32 FLAT:026E
@@LOOPREST			  Near32 FLAT:0052
@@LOOPREST			  Near32 FLAT:00B9
@@LOOPREST			  Near32 FLAT:013C
@@LOOPREST			  Near32 FLAT:01BF
@@LOOPREST			  Near32 FLAT:0242
@@LOOPX				  Near32 FLAT:0034
@@LOOPX				  Near32 FLAT:0095
@@LOOPX				  Near32 FLAT:0118
@@LOOPX				  Near32 FLAT:019B
@@LOOPX				  Near32 FLAT:021E
@@LOOPY				  Near32 FLAT:002E
@@LOOPY				  Near32 FLAT:008F
@@LOOPY				  Near32 FLAT:0112
@@LOOPY				  Near32 FLAT:0195
@@LOOPY				  Near32 FLAT:0218
@@TESTREST			  Near32 FLAT:00CB
@@TESTREST			  Near32 FLAT:014E
@@TESTREST			  Near32 FLAT:01D1
@@TESTREST			  Near32 FLAT:0254
@CODE				  Text	 FLAT
@CODESIZE			  Text	 0
@CPU				  Text	 4853H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 FLAT
@DATASIZE			  Text	 0
@FILENAME			  Text	 BITBLTMI
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 FLAT
@WORDSIZE			  Text	 4
AHEIGHT				  Number [FLAT:EBP+0010]
BLTEXTRACTCHANNEL24		  Near32 FLAT:00EC
BLTEXTRACTCHANNEL32		  Near32 FLAT:01F2
BLTINJECTCHANNEL24		  Near32 FLAT:0069
BLTINJECTCHANNEL32		  Near32 FLAT:016F
DWORDCOUNT			  Number [FLAT:EBP-0004]
FLIPVERTICAL			  Near32 FLAT:0000
MSKCOLORKEY			  Text	 00ffffffh
PIXELCOUNT			  Number [FLAT:EBP-0004]
WIDTHDEST			  Number [FLAT:EBP+0008]
WIDTHSOURCE			  Number [FLAT:EBP+000C]

Macro Name

ALIGNTO
BLTINIT8
BLTLOOPCOPYCHANNEL
BLTOPAQUE
BLTTRANS8

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  32  0000 Dword  Public  DATA
FLAT				  Group
_TEXT				  32  0275 Dword  Public  CODE
