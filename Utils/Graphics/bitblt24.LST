Turbo Assembler	 Version 5.0	    03-11-98 03:16:12	    Page 1
E:\JRG\Source\Utils\Graphics\bitblt24.asm



      1								 PAGE	 255, 255
      2
      3								 PUBLIC	 BltCopyTrans24
      4								 PUBLIC	 BltCopyShaded24
      5								 PUBLIC	 BltCopyGlassed24
      6								 PUBLIC	 BltCopySourceCTT24
      7								 PUBLIC	 BltCopyGlassedCTT24
      8
      9								 INCLUDE bitblt.inc
1    10					 IFNDEF	??version
1    11								 ; We must be using MASM or something, let's do	nothing	here!!
1    12					 ELSE
1    13								 ; ??version is	defined	by TASM, so we should use the LOCALS directive:
1    14								 LOCALS	 @@
1    15								 NOSMART
1    16					 ENDIF
1    17
1    18		  = 00ffffffh		 mskColorKey		 equ	 00ffffffh
1    19
1    20					 AlignTo		 macro	 AlignSize:REQ
1    21
1    22								 ; ( $ + AlignSize - 1 ) and not (AlignSize - 1)
1    23
1    24								 endm
1    25
1    26					 BltOpaque		 macro	 BltLoop:REQ, Param1, Param2, InitCode
1    27
1    28								 or	 ecx, ecx	  ; aWidth = 0?
1    29								 jz	 @@Exit
1    30								 cmp	 aHeight, 0	  ; aHeight = 0?
1    31								 je	 @@Exit
1    32
1    33								 mov	 edi, edx
1    34								 mov	 esi, eax
1    35
1    36								 sub	 WidthSource, ecx ; bias these
1    37								 sub	 WidthDest, ecx
1    38								 mov	 PixelCount, ecx
1    39								 InitCode
1    40						 @@LoopY:
1    41								 BltLoop Param1, Param2
1    42								 add	 esi, WidthSource
1    43								 add	 edi, WidthDest
1    44								 dec	 aHeight	   ; line counter
1    45								 jnz	 @@LoopY
1    46
1    47								 endm
1    48
1    49					 BltInit8		 macro
1    50
1    51								 or	 ecx, ecx			 ; aWidth = 0?
1    52								 jz	 @@Exit
1    53								 cmp	 aHeight, 0			 ; aHeight = 0?
1    54								 je	 @@Exit
1    55
1    56								 mov	 edi, edx
1    57								 mov	 esi, eax
1    58
1    59								 mov	 PixelCount, ecx		 ; save	this for later
1    60								 sub	 WidthSource, ecx		 ; bias	these
1    61								 sub	 WidthDest, ecx
1    62
1    63								 xor	 eax, eax
1    64								 mov	 dl, byte ptr Transparent
1    65
1    66								 endm
1    67
1    68					 ; The idea here is to not branch very often so	we unroll the loop by four
1    69					 ; and try to not branch when a	whole run of pixels is either transparent
1    70					 ; or not transparent.
1    71					 ;
1    72					 ; There are two loops.	One loop is for	a run of pixels	equal to the
1    73					 ; transparent color, the other	is for runs of pixels we need to store.
1    74					 ;
1    75					 ; When	we detect a "bad" pixel	we jump	to the same position in	the
1    76					 ; other loop.
1    77					 ;
1    78					 ; Here	is the loop we will stay in as long as we encounter a "transparent"
1    79					 ; pixel in the	source.
1    80
1    81					 BltTrans8		 macro	 BltWrite:REQ, DestWidth:REQ
1    82
1    83						 @@MoreLines:
1    84								 mov	 ecx, PixelCount  ; ECX	is pixel counter
1    85								 shr	 ecx, 2
1    86								 jz	 @@NextScan
1    87
1    88								 AlignTo 16
1    89						 @@Same:
1    90								 mov	 al, [esi]
1    91								 cmp	 al, dl
1    92								 jne	 @@Diff0
1    93						 @@Same0:
1    94								 mov	 al, [esi + 1]
1    95								 cmp	 al, dl
1    96								 jne	 @@Diff1
1    97						 @@Same1:
1    98								 mov	 al, [esi + 2]
1    99								 cmp	 al, dl
1   100								 jne	 @@Diff2
1   101						 @@Same2:
1   102								 mov	 al, [esi + 3]
1   103								 cmp	 al, dl
1   104								 jne	 @@Diff3
1   105						 @@Same3:
1   106								 add	 edi, DestWidth	* 4
1   107								 add	 esi, 4
1   108								 dec	 ecx
1   109								 jnz	 @@Same
1   110								 jmp	 @@NextScan
1   111
1   112								 AlignTo 16
1   113						 @@Diff:
1   114								 mov	 al, [esi]
1   115								 cmp	 al, dl
1   116								 je	 @@Same0
1   117						 @@Diff0:
1   118								 BltWrite 0
1   119								 mov	 al, [esi + 1]
1   120								 cmp	 al, dl
1   121								 je	 @@Same1
1   122						 @@Diff1:
1   123								 BltWrite 1
1   124								 mov	 al, [esi + 2]
1   125								 cmp	 al, dl
1   126								 je	 @@Same2
1   127						 @@Diff2:
1   128								 BltWrite 2
1   129								 mov	 al, [esi + 3]
1   130								 cmp	 al, dl
1   131								 je	 @@Same3
1   132						 @@Diff3:
1   133								 BltWrite 3
1   134
1   135								 add	 edi, DestWidth	* 4
1   136								 add	 esi, 4
1   137								 dec	 ecx
1   138								 jnz	 @@Diff
1   139
1   140						 @@NextScan:
1   141								 mov	 ecx, PixelCount
1   142								 and	 ecx, 11b
1   143								 jz	 @@NextScan1			 ; move	on to the start	of the next line
1   144
1   145						 @@OddLoop:
1   146								 mov	 al, [esi]
1   147						 IF DestWidth EQ 1
1   148								 inc	 edi
1   149						 ELSE
1   150								 add	 edi, DestWidth
1   151						 ENDIF
1   152								 inc	 esi
1   153								 cmp	 al, dl
1   154								 je	 @@OddCont
1   155								 BltWrite -1
1   156						 @@OddCont:
1   157								 dec	 ecx
1   158								 jnz	 @@OddLoop
1   159						 @@NextScan1:
1   160								 add	 esi, WidthSource
1   161								 add	 edi, WidthDest
1   162
1   163								 dec	 aHeight			 ; line	counter
1   164								 jnz	 @@MoreLines
1   165
1   166								 endm
1   167
1   168								 .586p
1   169	00000000						 .MODEL	FLAT
1   170
1   171	00000000						 .CODE
1   172
    173
    174					 ; 24-bit specific routines:
    175					 ; =============================================================================================
    176
    177					 BltInit24		 macro
    178
    179								 cmp	 aHeight, 0
    180								 je	 @@Exit
    181								 or	 ecx, ecx
    182								 je	 @@Exit
    183
    184								 mov	 edi, edx
    185								 mov	 esi, eax
    186
    187								 mov	 PixelCount, ecx		 ; save	this for later
    188								 lea	 ecx, [ecx * 2 + ecx]		 ; ecx := ecx *	3
    189
    190								 sub	 WidthSource, ecx		 ; bias	these
    191								 sub	 WidthDest, ecx
    192
    193								 mov	 edx, Transparent
    194								 and	 edx, mskColorKey
    195								 xor	 ebx, ebx
    196
    197								 endm
    198
    199					 BltTrans24		 macro	 BltWrite:REQ
    200
    201						 @@MoreLines:
    202								 mov	 ecx, PixelCount		 ; ECX is pixel	counter
    203								 shr	 ecx, 2
    204								 jz	 @@NextScan
    205
    206						 @@Same:
    207								 mov	 eax, [esi]
    208								 and	 eax, mskColorKey
    209								 cmp	 eax, edx
    210								 jne	 @@Diff0
    211
    212						 @@Same0:
    213								 mov	 eax, [esi + 3]
    214								 and	 eax, mskColorKey
    215								 cmp	 eax, edx
    216								 jne	 @@Diff1
    217
    218						 @@Same1:
    219								 mov	 eax, [esi + 6]
    220								 and	 eax, mskColorKey
    221								 cmp	 eax, edx
    222								 jne	 @@Diff2
    223
    224						 @@Same2:
    225								 mov	 eax, [esi + 9]
    226								 and	 eax, mskColorKey
    227								 cmp	 eax, edx
    228								 jne	 @@Diff3
    229
    230						 @@Same3:
    231								 add	 edi, 12
    232								 add	 esi, 12
    233								 dec	 ecx
    234								 jnz	 @@Same
    235								 jmp	 @@NextScan
    236
    237						 @@Diff:
    238								 mov	 eax, [esi]
    239								 and	 eax, mskColorKey
    240								 cmp	 eax, edx
    241								 je	 @@Same0
    242
    243						 @@Diff0:
    244								 BltWrite 0
    245								 mov	 eax, [esi + 3]
    246								 and	 eax, mskColorKey
    247								 cmp	 eax, edx
    248								 je	 @@Same1
    249
    250						 @@Diff1:
Turbo Assembler	 Version 5.0	    03-11-98 03:16:12	    Page 2
E:\JRG\Source\Utils\Graphics\bitblt24.asm



    251								 BltWrite 1
    252								 mov	 eax, [esi + 6]
    253								 and	 eax, mskColorKey
    254								 cmp	 eax, edx
    255								 je	 @@Same2
    256
    257						 @@Diff2:
    258								 BltWrite 2
    259								 mov	 eax, [esi + 9]
    260								 and	 eax, mskColorKey
    261								 cmp	 eax, edx
    262								 je	 @@Same3
    263
    264						 @@Diff3:
    265								 BltWrite 3
    266
    267								 add	 esi, 12
    268								 add	 edi, 12
    269								 dec	 ecx
    270								 jnz	 @@Diff
    271
    272						 @@NextScan:
    273								 mov	 ecx, PixelCount
    274								 and	 ecx, 11b
    275								 jnz	 @@OddLoop			 ; move	on to the start	of the next line
    276
    277						 @@NextScan1:
    278								 add	 esi, WidthSource
    279								 add	 edi, WidthDest
    280
    281								 dec	 aHeight			 ; line	counter
    282								 jnz	 @@MoreLines
    283								 jmp	 @@Exit
    284
    285						 @@OddLoop:
    286								 mov	 eax, [esi]
    287								 add	 edi, 3
    288								 add	 esi, 3
    289								 and	 eax, mskColorKey
    290								 cmp	 eax, edx
    291								 je	 @@OddCont
    292								 BltWrite -1
    293
    294						 @@OddCont:
    295								 dec	 ecx
    296								 jnz	 @@OddLoop
    297								 jmp	 @@NextScan1
    298
    299								 endm
    300
    301	00000000			 BltCopyTrans24		 PROC PASCAL USES ESI EDI EBX, \ ; Source, Dest	: ptr byte, aWidth,
    302									 aHeight : dword, Transparent :	dword, \
    303									 WidthSource, WidthDest	: dword
    304					 ;
    305					 ;     On entry:
    306					 ;
    307					 ;     EAX: Source
    308					 ;     EDX: Dest
    309					 ;     ECX: aWidth
    310					 ;
    311
    312								 LOCAL	 PixelCount : dword
    313
    314					 BltCopyTrans24Write	 macro	 Indx:REQ
    315
    316								 mov	 [edi +	(Indx) * 3 + 0], ax
    317								 shr	 eax, 16
    318								 mov	 [edi +	(Indx) * 3 + 2], al
    319
    320								 endm
    321
    322								 BltInit24
1   323
2   324	00000000  C8 0004 00			 ENTERD	 00004h,0
2   325	00000004  56				 PUSH	 ESI
2   326	00000005  57				 PUSH	 EDI
2   327	00000006  53				 PUSH	 EBX
2   328	00000007  83 7D	14 00					 cmp	 aHeight, 0
1   329	0000000B  0F 84	00000122				 je	 @@Exit
1   330	00000011  0B C9						 or	 ecx, ecx
1   331	00000013  0F 84	0000011A				 je	 @@Exit
1   332
1   333	00000019  8B FA						 mov	 edi, edx
1   334	0000001B  8B F0						 mov	 esi, eax
1   335
1   336	0000001D  89 4D	FC					 mov	 PixelCount, ecx		 ; save	this for later
1   337	00000020  8D 0C	49					 lea	 ecx, [ecx * 2 + ecx]		 ; ecx := ecx *	3
1   338
1   339	00000023  29 4D	0C					 sub	 WidthSource, ecx		 ; bias	these
1   340	00000026  29 4D	08					 sub	 WidthDest, ecx
1   341
1   342	00000029  8B 55	10					 mov	 edx, Transparent
1   343	0000002C  81 E2	00FFFFFF				 and	 edx, mskColorKey
1   344	00000032  33 DB						 xor	 ebx, ebx
1   345
    346								 BltTrans24 BltCopyTrans24Write
1   347
1   348	00000034				 @@MoreLines:
1   349	00000034  8B 4D	FC					 mov	 ecx, PixelCount		 ; ECX is pixel	counter
1   350	00000037  C1 E9	02					 shr	 ecx, 2
1   351	0000003A  0F 84	000000AC				 jz	 @@NextScan
1   352
1   353	00000040				 @@Same:
1   354	00000040  8B 06						 mov	 eax, [esi]
1   355	00000042  25 00FFFFFF					 and	 eax, mskColorKey
1   356	00000047  3B C2						 cmp	 eax, edx
1   357	00000049  75 4D	90 90 90 90				 jne	 @@Diff0
1   358
1   359	0000004F				 @@Same0:
1   360	0000004F  8B 46	03					 mov	 eax, [esi + 3]
1   361	00000052  25 00FFFFFF					 and	 eax, mskColorKey
1   362	00000057  3B C2						 cmp	 eax, edx
1   363	00000059  75 52	90 90 90 90				 jne	 @@Diff1
1   364
1   365	0000005F				 @@Same1:
1   366	0000005F  8B 46	06					 mov	 eax, [esi + 6]
1   367	00000062  25 00FFFFFF					 and	 eax, mskColorKey
1   368	00000067  3B C2						 cmp	 eax, edx
1   369	00000069  75 58	90 90 90 90				 jne	 @@Diff2
1   370
1   371	0000006F				 @@Same2:
1   372	0000006F  8B 46	09					 mov	 eax, [esi + 9]
1   373	00000072  25 00FFFFFF					 and	 eax, mskColorKey
1   374	00000077  3B C2						 cmp	 eax, edx
1   375	00000079  75 5E	90 90 90 90				 jne	 @@Diff3
1   376
1   377	0000007F				 @@Same3:
1   378	0000007F  83 C7	0C					 add	 edi, 12
1   379	00000082  83 C6	0C					 add	 esi, 12
1   380	00000085  49						 dec	 ecx
1   381	00000086  75 B8						 jnz	 @@Same
1   382	00000088  EB 62	90 90 90				 jmp	 @@NextScan
1   383
1   384	0000008D				 @@Diff:
1   385	0000008D  8B 06						 mov	 eax, [esi]
1   386	0000008F  25 00FFFFFF					 and	 eax, mskColorKey
1   387	00000094  3B C2						 cmp	 eax, edx
1   388	00000096  74 B7						 je	 @@Same0
1   389
1   390	00000098				 @@Diff0:
1   391								 BltCopyTrans24Write 0
2   392
2   393	00000098  66| 89 07					 mov	 [edi +	(0) * 3	+ 0], ax
2   394	0000009B  C1 E8	10					 shr	 eax, 16
2   395	0000009E  88 47	02					 mov	 [edi +	(0) * 3	+ 2], al
2   396
1   397	000000A1  8B 46	03					 mov	 eax, [esi + 3]
1   398	000000A4  25 00FFFFFF					 and	 eax, mskColorKey
1   399	000000A9  3B C2						 cmp	 eax, edx
1   400	000000AB  74 B2						 je	 @@Same1
1   401
1   402	000000AD				 @@Diff1:
1   403								 BltCopyTrans24Write 1
2   404
2   405	000000AD  66| 89 47 03					 mov	 [edi +	(1) * 3	+ 0], ax
2   406	000000B1  C1 E8	10					 shr	 eax, 16
2   407	000000B4  88 47	05					 mov	 [edi +	(1) * 3	+ 2], al
2   408
1   409	000000B7  8B 46	06					 mov	 eax, [esi + 6]
1   410	000000BA  25 00FFFFFF					 and	 eax, mskColorKey
1   411	000000BF  3B C2						 cmp	 eax, edx
1   412	000000C1  74 AC						 je	 @@Same2
1   413
1   414	000000C3				 @@Diff2:
1   415								 BltCopyTrans24Write 2
2   416
2   417	000000C3  66| 89 47 06					 mov	 [edi +	(2) * 3	+ 0], ax
2   418	000000C7  C1 E8	10					 shr	 eax, 16
2   419	000000CA  88 47	08					 mov	 [edi +	(2) * 3	+ 2], al
2   420
1   421	000000CD  8B 46	09					 mov	 eax, [esi + 9]
1   422	000000D0  25 00FFFFFF					 and	 eax, mskColorKey
1   423	000000D5  3B C2						 cmp	 eax, edx
1   424	000000D7  74 A6						 je	 @@Same3
1   425
1   426	000000D9				 @@Diff3:
1   427								 BltCopyTrans24Write 3
2   428
2   429	000000D9  66| 89 47 09					 mov	 [edi +	(3) * 3	+ 0], ax
2   430	000000DD  C1 E8	10					 shr	 eax, 16
2   431	000000E0  88 47	0B					 mov	 [edi +	(3) * 3	+ 2], al
2   432
1   433
1   434	000000E3  83 C6	0C					 add	 esi, 12
1   435	000000E6  83 C7	0C					 add	 edi, 12
1   436	000000E9  49						 dec	 ecx
1   437	000000EA  75 A1						 jnz	 @@Diff
1   438
1   439	000000EC				 @@NextScan:
1   440	000000EC  8B 4D	FC					 mov	 ecx, PixelCount
1   441	000000EF  81 E1	00000003				 and	 ecx, 11b
1   442	000000F5  75 18	90 90 90 90				 jnz	 @@OddLoop			 ; move	on to the start	of the next line
1   443
1   444	000000FB				 @@NextScan1:
1   445	000000FB  03 75	0C					 add	 esi, WidthSource
1   446	000000FE  03 7D	08					 add	 edi, WidthDest
1   447
1   448	00000101  FF 4D	14					 dec	 aHeight			 ; line	counter
1   449	00000104  0F 85	FFFFFF2A				 jnz	 @@MoreLines
1   450	0000010A  EB 27	90 90 90				 jmp	 @@Exit
1   451
1   452	0000010F				 @@OddLoop:
1   453	0000010F  8B 06						 mov	 eax, [esi]
1   454	00000111  83 C7	03					 add	 edi, 3
1   455	00000114  83 C6	03					 add	 esi, 3
1   456	00000117  25 00FFFFFF					 and	 eax, mskColorKey
1   457	0000011C  3B C2						 cmp	 eax, edx
1   458	0000011E  74 0E	90 90 90 90				 je	 @@OddCont
1   459								 BltCopyTrans24Write -1
2   460
2   461	00000124  66| 89 47 FD					 mov	 [edi +	(-1) * 3 + 0], ax
2   462	00000128  C1 E8	10					 shr	 eax, 16
2   463	0000012B  88 47	FF					 mov	 [edi +	(-1) * 3 + 2], al
2   464
1   465
1   466	0000012E				 @@OddCont:
1   467	0000012E  49						 dec	 ecx
1   468	0000012F  75 DE						 jnz	 @@OddLoop
1   469	00000131  EB C8						 jmp	 @@NextScan1
1   470
    471	00000133				 @@Exit:
1   472	00000133  5B				 POP	 EBX
1   473	00000134  5F				 POP	 EDI
1   474	00000135  5E				 POP	 ESI
1   475	00000136  C9				 LEAVED
1   476	00000137  C2 0010			 RET	 00010h
    477
    478	0000013A			 BltCopyTrans24		 ENDP
    479
    480		  =006E			 lightShadeColor	 equ	 110		 ; This	is the gray level used to form the shadow...
    481
    482	0000013A			 BltCopyShaded24	 PROC PASCAL USES ESI EDI, \ ; Source, Dest : ptr byte,	aWidth,
    483									 aHeight : dword, Transparent :	dword, \
    484									 WidthSource, WidthDest	: dword, Info :	ptr byte
    485					 ;
    486					 ;     On entry:
    487					 ;
    488					 ;     EAX: Source
    489					 ;     EDX: Dest
    490					 ;     ECX: aWidth
    491					 ;
    492
    493								 LOCAL	 PixelCount : dword
    494
    495					 BltCopyShaded24Write	 macro	 Indx:REQ
    496
    497								 movzx	 ax, byte ptr [edi + (Indx) * 3	+ 0]
    498								 add	 ax, lightShadeColor
    499								 shr	 ax, 1
    500								 mov	 [edi +	(Indx) * 3 + 0], al
Turbo Assembler	 Version 5.0	    03-11-98 03:16:12	    Page 3
E:\JRG\Source\Utils\Graphics\bitblt24.asm



    501
    502								 movzx	 ax, byte ptr [edi + (Indx) * 3	+ 1]
    503								 add	 ax, lightShadeColor
    504								 shr	 ax, 1
    505								 mov	 [edi +	(Indx) * 3 + 1], al
    506
    507								 movzx	 ax, byte ptr [edi + (Indx) * 3	+ 2]
    508								 add	 ax, lightShadeColor
    509								 shr	 ax, 1
    510								 mov	 [edi +	(Indx) * 3 + 2], al
    511
    512								 endm
    513
    514								 BltInit24
1   515
2   516	0000013A  C8 0004 00			 ENTERD	 00004h,0
2   517	0000013E  56				 PUSH	 ESI
2   518	0000013F  57				 PUSH	 EDI
2   519	00000140  83 7D	18 00					 cmp	 aHeight, 0
1   520	00000144  0F 84	00000122				 je	 @@Exit
1   521	0000014A  0B C9						 or	 ecx, ecx
1   522	0000014C  0F 84	0000011A				 je	 @@Exit
1   523
1   524	00000152  8B FA						 mov	 edi, edx
1   525	00000154  8B F0						 mov	 esi, eax
1   526
1   527	00000156  89 4D	FC					 mov	 PixelCount, ecx		 ; save	this for later
1   528	00000159  8D 0C	49					 lea	 ecx, [ecx * 2 + ecx]		 ; ecx := ecx *	3
1   529
1   530	0000015C  29 4D	10					 sub	 WidthSource, ecx		 ; bias	these
1   531	0000015F  29 4D	0C					 sub	 WidthDest, ecx
1   532
1   533	00000162  8B 55	14					 mov	 edx, Transparent
1   534	00000165  81 E2	00FFFFFF				 and	 edx, mskColorKey
1   535	0000016B  33 DB						 xor	 ebx, ebx
1   536
    537								 BltTrans24 BltCopyTrans24Write
1   538
1   539	0000016D				 @@MoreLines:
1   540	0000016D  8B 4D	FC					 mov	 ecx, PixelCount		 ; ECX is pixel	counter
1   541	00000170  C1 E9	02					 shr	 ecx, 2
1   542	00000173  0F 84	000000AC				 jz	 @@NextScan
1   543
1   544	00000179				 @@Same:
1   545	00000179  8B 06						 mov	 eax, [esi]
1   546	0000017B  25 00FFFFFF					 and	 eax, mskColorKey
1   547	00000180  3B C2						 cmp	 eax, edx
1   548	00000182  75 4D	90 90 90 90				 jne	 @@Diff0
1   549
1   550	00000188				 @@Same0:
1   551	00000188  8B 46	03					 mov	 eax, [esi + 3]
1   552	0000018B  25 00FFFFFF					 and	 eax, mskColorKey
1   553	00000190  3B C2						 cmp	 eax, edx
1   554	00000192  75 52	90 90 90 90				 jne	 @@Diff1
1   555
1   556	00000198				 @@Same1:
1   557	00000198  8B 46	06					 mov	 eax, [esi + 6]
1   558	0000019B  25 00FFFFFF					 and	 eax, mskColorKey
1   559	000001A0  3B C2						 cmp	 eax, edx
1   560	000001A2  75 58	90 90 90 90				 jne	 @@Diff2
1   561
1   562	000001A8				 @@Same2:
1   563	000001A8  8B 46	09					 mov	 eax, [esi + 9]
1   564	000001AB  25 00FFFFFF					 and	 eax, mskColorKey
1   565	000001B0  3B C2						 cmp	 eax, edx
1   566	000001B2  75 5E	90 90 90 90				 jne	 @@Diff3
1   567
1   568	000001B8				 @@Same3:
1   569	000001B8  83 C7	0C					 add	 edi, 12
1   570	000001BB  83 C6	0C					 add	 esi, 12
1   571	000001BE  49						 dec	 ecx
1   572	000001BF  75 B8						 jnz	 @@Same
1   573	000001C1  EB 62	90 90 90				 jmp	 @@NextScan
1   574
1   575	000001C6				 @@Diff:
1   576	000001C6  8B 06						 mov	 eax, [esi]
1   577	000001C8  25 00FFFFFF					 and	 eax, mskColorKey
1   578	000001CD  3B C2						 cmp	 eax, edx
1   579	000001CF  74 B7						 je	 @@Same0
1   580
1   581	000001D1				 @@Diff0:
1   582								 BltCopyTrans24Write 0
2   583
2   584	000001D1  66| 89 07					 mov	 [edi +	(0) * 3	+ 0], ax
2   585	000001D4  C1 E8	10					 shr	 eax, 16
2   586	000001D7  88 47	02					 mov	 [edi +	(0) * 3	+ 2], al
2   587
1   588	000001DA  8B 46	03					 mov	 eax, [esi + 3]
1   589	000001DD  25 00FFFFFF					 and	 eax, mskColorKey
1   590	000001E2  3B C2						 cmp	 eax, edx
1   591	000001E4  74 B2						 je	 @@Same1
1   592
1   593	000001E6				 @@Diff1:
1   594								 BltCopyTrans24Write 1
2   595
2   596	000001E6  66| 89 47 03					 mov	 [edi +	(1) * 3	+ 0], ax
2   597	000001EA  C1 E8	10					 shr	 eax, 16
2   598	000001ED  88 47	05					 mov	 [edi +	(1) * 3	+ 2], al
2   599
1   600	000001F0  8B 46	06					 mov	 eax, [esi + 6]
1   601	000001F3  25 00FFFFFF					 and	 eax, mskColorKey
1   602	000001F8  3B C2						 cmp	 eax, edx
1   603	000001FA  74 AC						 je	 @@Same2
1   604
1   605	000001FC				 @@Diff2:
1   606								 BltCopyTrans24Write 2
2   607
2   608	000001FC  66| 89 47 06					 mov	 [edi +	(2) * 3	+ 0], ax
2   609	00000200  C1 E8	10					 shr	 eax, 16
2   610	00000203  88 47	08					 mov	 [edi +	(2) * 3	+ 2], al
2   611
1   612	00000206  8B 46	09					 mov	 eax, [esi + 9]
1   613	00000209  25 00FFFFFF					 and	 eax, mskColorKey
1   614	0000020E  3B C2						 cmp	 eax, edx
1   615	00000210  74 A6						 je	 @@Same3
1   616
1   617	00000212				 @@Diff3:
1   618								 BltCopyTrans24Write 3
2   619
2   620	00000212  66| 89 47 09					 mov	 [edi +	(3) * 3	+ 0], ax
2   621	00000216  C1 E8	10					 shr	 eax, 16
2   622	00000219  88 47	0B					 mov	 [edi +	(3) * 3	+ 2], al
2   623
1   624
1   625	0000021C  83 C6	0C					 add	 esi, 12
1   626	0000021F  83 C7	0C					 add	 edi, 12
1   627	00000222  49						 dec	 ecx
1   628	00000223  75 A1						 jnz	 @@Diff
1   629
1   630	00000225				 @@NextScan:
1   631	00000225  8B 4D	FC					 mov	 ecx, PixelCount
1   632	00000228  81 E1	00000003				 and	 ecx, 11b
1   633	0000022E  75 18	90 90 90 90				 jnz	 @@OddLoop			 ; move	on to the start	of the next line
1   634
1   635	00000234				 @@NextScan1:
1   636	00000234  03 75	10					 add	 esi, WidthSource
1   637	00000237  03 7D	0C					 add	 edi, WidthDest
1   638
1   639	0000023A  FF 4D	18					 dec	 aHeight			 ; line	counter
1   640	0000023D  0F 85	FFFFFF2A				 jnz	 @@MoreLines
1   641	00000243  EB 27	90 90 90				 jmp	 @@Exit
1   642
1   643	00000248				 @@OddLoop:
1   644	00000248  8B 06						 mov	 eax, [esi]
1   645	0000024A  83 C7	03					 add	 edi, 3
1   646	0000024D  83 C6	03					 add	 esi, 3
1   647	00000250  25 00FFFFFF					 and	 eax, mskColorKey
1   648	00000255  3B C2						 cmp	 eax, edx
1   649	00000257  74 0E	90 90 90 90				 je	 @@OddCont
1   650								 BltCopyTrans24Write -1
2   651
2   652	0000025D  66| 89 47 FD					 mov	 [edi +	(-1) * 3 + 0], ax
2   653	00000261  C1 E8	10					 shr	 eax, 16
2   654	00000264  88 47	FF					 mov	 [edi +	(-1) * 3 + 2], al
2   655
1   656
1   657	00000267				 @@OddCont:
1   658	00000267  49						 dec	 ecx
1   659	00000268  75 DE						 jnz	 @@OddLoop
1   660	0000026A  EB C8						 jmp	 @@NextScan1
1   661
    662
    663	0000026C				 @@Exit:
1   664	0000026C  5F				 POP	 EDI
1   665	0000026D  5E				 POP	 ESI
1   666	0000026E  C9				 LEAVED
1   667	0000026F  C2 0014			 RET	 00014h
    668
    669	00000272			 BltCopyShaded24	 ENDP
    670
    671	00000272			 BltCopyGlassed24	 PROC PASCAL USES ESI EDI EBX, \ ; Source, Dest	: ptr byte, aWidth,
    672									 aHeight : dword, Transparent :	dword, \
    673									 WidthSource, WidthDest	: dword, Info :	ptr byte
    674					 ;
    675					 ;     On entry:
    676					 ;
    677					 ;     EAX: Source
    678					 ;     EDX: Dest
    679					 ;     ECX: aWidth
    680
    681								 LOCAL	 PixelCount : dword
    682
    683					 BltCopyGlassed24Write	 macro	 Indx:REQ ; // Unfinished!, see	EDX problem!!
    684
    685								 mov	 bl, al			   ; [edi][Indx] := ( al + [edi][Indx] ) div 2
    686								 add	 bl, [edi + (Indx) * 3]
    687								 adc	 bh, 0
    688								 shr	 bx, 1
    689								 mov	 [edi +	(Indx) * 3], bl
    690
    691								 mov	 bl, ah
    692								 mov	 bl, [edi + (Indx) * 3 + 1]
    693								 mov	 dl, al
    694								 add	 bx, dx
    695								 shr	 bx, 1
    696								 mov	 [edi +	(Indx) * 3 + 1], bl
    697
    698								 shr	 eax, 8
    699								 mov	 bl, [edi + (Indx) * 3 + 2]
    700								 add	 bx, ax
    701								 shr	 bx, 1
    702								 mov	 [edi +	(Indx) * 3 + 2], bl
    703
    704								 endm
    705
    706								 BltInit24
1   707
2   708	00000272  C8 0004 00			 ENTERD	 00004h,0
2   709	00000276  56				 PUSH	 ESI
2   710	00000277  57				 PUSH	 EDI
2   711	00000278  53				 PUSH	 EBX
2   712	00000279  83 7D	18 00					 cmp	 aHeight, 0
1   713	0000027D  0F 84	000001DE				 je	 @@Exit
1   714	00000283  0B C9						 or	 ecx, ecx
1   715	00000285  0F 84	000001D6				 je	 @@Exit
1   716
1   717	0000028B  8B FA						 mov	 edi, edx
1   718	0000028D  8B F0						 mov	 esi, eax
1   719
1   720	0000028F  89 4D	FC					 mov	 PixelCount, ecx		 ; save	this for later
1   721	00000292  8D 0C	49					 lea	 ecx, [ecx * 2 + ecx]		 ; ecx := ecx *	3
1   722
1   723	00000295  29 4D	10					 sub	 WidthSource, ecx		 ; bias	these
1   724	00000298  29 4D	0C					 sub	 WidthDest, ecx
1   725
1   726	0000029B  8B 55	14					 mov	 edx, Transparent
1   727	0000029E  81 E2	00FFFFFF				 and	 edx, mskColorKey
1   728	000002A4  33 DB						 xor	 ebx, ebx
1   729
    730
    731	000002A6  33 DB						 xor	 ebx, ebx
    732								 BltTrans24 BltCopyGlassed24Write
1   733
1   734	000002A8				 @@MoreLines:
1   735	000002A8  8B 4D	FC					 mov	 ecx, PixelCount		 ; ECX is pixel	counter
1   736	000002AB  C1 E9	02					 shr	 ecx, 2
1   737	000002AE  0F 84	00000143				 jz	 @@NextScan
1   738
1   739	000002B4				 @@Same:
1   740	000002B4  8B 06						 mov	 eax, [esi]
1   741	000002B6  25 00FFFFFF					 and	 eax, mskColorKey
1   742	000002BB  3B C2						 cmp	 eax, edx
1   743	000002BD  75 4D	90 90 90 90				 jne	 @@Diff0
1   744
1   745	000002C3				 @@Same0:
1   746	000002C3  8B 46	03					 mov	 eax, [esi + 3]
1   747	000002C6  25 00FFFFFF					 and	 eax, mskColorKey
1   748	000002CB  3B C2						 cmp	 eax, edx
1   749	000002CD  75 74	90 90 90 90				 jne	 @@Diff1
1   750
Turbo Assembler	 Version 5.0	    03-11-98 03:16:12	    Page 4
E:\JRG\Source\Utils\Graphics\bitblt24.asm



1   751	000002D3				 @@Same1:
1   752	000002D3  8B 46	06					 mov	 eax, [esi + 6]
1   753	000002D6  25 00FFFFFF					 and	 eax, mskColorKey
1   754	000002DB  3B C2						 cmp	 eax, edx
1   755	000002DD  0F 85	0000009D				 jne	 @@Diff2
1   756
1   757	000002E3				 @@Same2:
1   758	000002E3  8B 46	09					 mov	 eax, [esi + 9]
1   759	000002E6  25 00FFFFFF					 and	 eax, mskColorKey
1   760	000002EB  3B C2						 cmp	 eax, edx
1   761	000002ED  0F 85	000000CA				 jne	 @@Diff3
1   762
1   763	000002F3				 @@Same3:
1   764	000002F3  83 C7	0C					 add	 edi, 12
1   765	000002F6  83 C6	0C					 add	 esi, 12
1   766	000002F9  49						 dec	 ecx
1   767	000002FA  75 B8						 jnz	 @@Same
1   768	000002FC  E9 000000F6					 jmp	 @@NextScan
1   769
1   770	00000301				 @@Diff:
1   771	00000301  8B 06						 mov	 eax, [esi]
1   772	00000303  25 00FFFFFF					 and	 eax, mskColorKey
1   773	00000308  3B C2						 cmp	 eax, edx
1   774	0000030A  74 B7						 je	 @@Same0
1   775
1   776	0000030C				 @@Diff0:
1   777								 BltCopyGlassed24Write 0
2   778
2   779	0000030C  8A D8						 mov	 bl, al			   ; [edi][0] := ( al +	[edi][0] ) div 2
2   780	0000030E  02 1F						 add	 bl, [edi + (0)	* 3]
2   781	00000310  80 D7	00					 adc	 bh, 0
2   782	00000313  66| D1 EB					 shr	 bx, 1
2   783	00000316  88 1F						 mov	 [edi +	(0) * 3], bl
2   784
2   785	00000318  8A DC						 mov	 bl, ah
2   786	0000031A  8A 5F	01					 mov	 bl, [edi + (0)	* 3 + 1]
2   787	0000031D  8A D0						 mov	 dl, al
2   788	0000031F  66| 03 DA					 add	 bx, dx
2   789	00000322  66| D1 EB					 shr	 bx, 1
2   790	00000325  88 5F	01					 mov	 [edi +	(0) * 3	+ 1], bl
2   791
2   792	00000328  C1 E8	08					 shr	 eax, 8
2   793	0000032B  8A 5F	02					 mov	 bl, [edi + (0)	* 3 + 2]
2   794	0000032E  66| 03 D8					 add	 bx, ax
2   795	00000331  66| D1 EB					 shr	 bx, 1
2   796	00000334  88 5F	02					 mov	 [edi +	(0) * 3	+ 2], bl
2   797
1   798	00000337  8B 46	03					 mov	 eax, [esi + 3]
1   799	0000033A  25 00FFFFFF					 and	 eax, mskColorKey
1   800	0000033F  3B C2						 cmp	 eax, edx
1   801	00000341  74 90						 je	 @@Same1
1   802
1   803	00000343				 @@Diff1:
1   804								 BltCopyGlassed24Write 1
2   805
2   806	00000343  8A D8						 mov	 bl, al			   ; [edi][1] := ( al +	[edi][1] ) div 2
2   807	00000345  02 5F	03					 add	 bl, [edi + (1)	* 3]
2   808	00000348  80 D7	00					 adc	 bh, 0
2   809	0000034B  66| D1 EB					 shr	 bx, 1
2   810	0000034E  88 5F	03					 mov	 [edi +	(1) * 3], bl
2   811
2   812	00000351  8A DC						 mov	 bl, ah
2   813	00000353  8A 5F	04					 mov	 bl, [edi + (1)	* 3 + 1]
2   814	00000356  8A D0						 mov	 dl, al
2   815	00000358  66| 03 DA					 add	 bx, dx
2   816	0000035B  66| D1 EB					 shr	 bx, 1
2   817	0000035E  88 5F	04					 mov	 [edi +	(1) * 3	+ 1], bl
2   818
2   819	00000361  C1 E8	08					 shr	 eax, 8
2   820	00000364  8A 5F	05					 mov	 bl, [edi + (1)	* 3 + 2]
2   821	00000367  66| 03 D8					 add	 bx, ax
2   822	0000036A  66| D1 EB					 shr	 bx, 1
2   823	0000036D  88 5F	05					 mov	 [edi +	(1) * 3	+ 2], bl
2   824
1   825	00000370  8B 46	06					 mov	 eax, [esi + 6]
1   826	00000373  25 00FFFFFF					 and	 eax, mskColorKey
1   827	00000378  3B C2						 cmp	 eax, edx
1   828	0000037A  0F 84	FFFFFF63				 je	 @@Same2
1   829
1   830	00000380				 @@Diff2:
1   831								 BltCopyGlassed24Write 2
2   832
2   833	00000380  8A D8						 mov	 bl, al			   ; [edi][2] := ( al +	[edi][2] ) div 2
2   834	00000382  02 5F	06					 add	 bl, [edi + (2)	* 3]
2   835	00000385  80 D7	00					 adc	 bh, 0
2   836	00000388  66| D1 EB					 shr	 bx, 1
2   837	0000038B  88 5F	06					 mov	 [edi +	(2) * 3], bl
2   838
2   839	0000038E  8A DC						 mov	 bl, ah
2   840	00000390  8A 5F	07					 mov	 bl, [edi + (2)	* 3 + 1]
2   841	00000393  8A D0						 mov	 dl, al
2   842	00000395  66| 03 DA					 add	 bx, dx
2   843	00000398  66| D1 EB					 shr	 bx, 1
2   844	0000039B  88 5F	07					 mov	 [edi +	(2) * 3	+ 1], bl
2   845
2   846	0000039E  C1 E8	08					 shr	 eax, 8
2   847	000003A1  8A 5F	08					 mov	 bl, [edi + (2)	* 3 + 2]
2   848	000003A4  66| 03 D8					 add	 bx, ax
2   849	000003A7  66| D1 EB					 shr	 bx, 1
2   850	000003AA  88 5F	08					 mov	 [edi +	(2) * 3	+ 2], bl
2   851
1   852	000003AD  8B 46	09					 mov	 eax, [esi + 9]
1   853	000003B0  25 00FFFFFF					 and	 eax, mskColorKey
1   854	000003B5  3B C2						 cmp	 eax, edx
1   855	000003B7  0F 84	FFFFFF36				 je	 @@Same3
1   856
1   857	000003BD				 @@Diff3:
1   858								 BltCopyGlassed24Write 3
2   859
2   860	000003BD  8A D8						 mov	 bl, al			   ; [edi][3] := ( al +	[edi][3] ) div 2
2   861	000003BF  02 5F	09					 add	 bl, [edi + (3)	* 3]
2   862	000003C2  80 D7	00					 adc	 bh, 0
2   863	000003C5  66| D1 EB					 shr	 bx, 1
2   864	000003C8  88 5F	09					 mov	 [edi +	(3) * 3], bl
2   865
2   866	000003CB  8A DC						 mov	 bl, ah
2   867	000003CD  8A 5F	0A					 mov	 bl, [edi + (3)	* 3 + 1]
2   868	000003D0  8A D0						 mov	 dl, al
2   869	000003D2  66| 03 DA					 add	 bx, dx
2   870	000003D5  66| D1 EB					 shr	 bx, 1
2   871	000003D8  88 5F	0A					 mov	 [edi +	(3) * 3	+ 1], bl
2   872
2   873	000003DB  C1 E8	08					 shr	 eax, 8
2   874	000003DE  8A 5F	0B					 mov	 bl, [edi + (3)	* 3 + 2]
2   875	000003E1  66| 03 D8					 add	 bx, ax
2   876	000003E4  66| D1 EB					 shr	 bx, 1
2   877	000003E7  88 5F	0B					 mov	 [edi +	(3) * 3	+ 2], bl
2   878
1   879
1   880	000003EA  83 C6	0C					 add	 esi, 12
1   881	000003ED  83 C7	0C					 add	 edi, 12
1   882	000003F0  49						 dec	 ecx
1   883	000003F1  0F 85	FFFFFF0A				 jnz	 @@Diff
1   884
1   885	000003F7				 @@NextScan:
1   886	000003F7  8B 4D	FC					 mov	 ecx, PixelCount
1   887	000003FA  81 E1	00000003				 and	 ecx, 11b
1   888	00000400  75 18	90 90 90 90				 jnz	 @@OddLoop			 ; move	on to the start	of the next line
1   889
1   890	00000406				 @@NextScan1:
1   891	00000406  03 75	10					 add	 esi, WidthSource
1   892	00000409  03 7D	0C					 add	 edi, WidthDest
1   893
1   894	0000040C  FF 4D	18					 dec	 aHeight			 ; line	counter
1   895	0000040F  0F 85	FFFFFE93				 jnz	 @@MoreLines
1   896	00000415  EB 4A	90 90 90				 jmp	 @@Exit
1   897
1   898	0000041A				 @@OddLoop:
1   899	0000041A  8B 06						 mov	 eax, [esi]
1   900	0000041C  83 C7	03					 add	 edi, 3
1   901	0000041F  83 C6	03					 add	 esi, 3
1   902	00000422  25 00FFFFFF					 and	 eax, mskColorKey
1   903	00000427  3B C2						 cmp	 eax, edx
1   904	00000429  74 31	90 90 90 90				 je	 @@OddCont
1   905								 BltCopyGlassed24Write -1
2   906
2   907	0000042F  8A D8						 mov	 bl, al			   ; [edi][-1] := ( al + [edi][-1] ) div 2
2   908	00000431  02 5F	FD					 add	 bl, [edi + (-1) * 3]
2   909	00000434  80 D7	00					 adc	 bh, 0
2   910	00000437  66| D1 EB					 shr	 bx, 1
2   911	0000043A  88 5F	FD					 mov	 [edi +	(-1) * 3], bl
2   912
2   913	0000043D  8A DC						 mov	 bl, ah
2   914	0000043F  8A 5F	FE					 mov	 bl, [edi + (-1) * 3 + 1]
2   915	00000442  8A D0						 mov	 dl, al
2   916	00000444  66| 03 DA					 add	 bx, dx
2   917	00000447  66| D1 EB					 shr	 bx, 1
2   918	0000044A  88 5F	FE					 mov	 [edi +	(-1) * 3 + 1], bl
2   919
2   920	0000044D  C1 E8	08					 shr	 eax, 8
2   921	00000450  8A 5F	FF					 mov	 bl, [edi + (-1) * 3 + 2]
2   922	00000453  66| 03 D8					 add	 bx, ax
2   923	00000456  66| D1 EB					 shr	 bx, 1
2   924	00000459  88 5F	FF					 mov	 [edi +	(-1) * 3 + 2], bl
2   925
1   926
1   927	0000045C				 @@OddCont:
1   928	0000045C  49						 dec	 ecx
1   929	0000045D  75 BB						 jnz	 @@OddLoop
1   930	0000045F  EB A5						 jmp	 @@NextScan1
1   931
    932
    933	00000461				 @@Exit:
1   934	00000461  5B				 POP	 EBX
1   935	00000462  5F				 POP	 EDI
1   936	00000463  5E				 POP	 ESI
1   937	00000464  C9				 LEAVED
1   938	00000465  C2 0014			 RET	 00014h
    939
    940	00000468			 BltCopyGlassed24	 ENDP
    941
    942	00000468			 BltCopySourceCTT24	 PROC PASCAL USES ESI EDI EBX, \ ; Source, Dest	: ptr byte, aWidth,
    943									 aHeight : dword, Transparent :	dword, \
    944									 WidthSource, WidthDest	: dword, Info :	ptr dword
    945					 ;
    946					 ;     On entry:
    947					 ;
    948					 ;     EAX: Source
    949					 ;     EDX: Dest
    950					 ;     ECX: aWidth
    951					 ;
    952
    953								 LOCAL	 PixelCount : dword
    954
    955					 BltCopySourceCTT24Write macro	 Indx:REQ
    956
    957								 mov	 eax, [ebx + eax * 4]
    958								 mov	 [edi +	(Indx) * 3], ax
    959								 shr	 eax, 16
    960								 mov	 [edi +	(Indx) * 3 + 2], al
    961								 xor	 eax, eax
    962
    963								 endm
    964
    965								 BltInit8
1   966
2   967	00000468  C8 0004 00			 ENTERD	 00004h,0
2   968	0000046C  56				 PUSH	 ESI
2   969	0000046D  57				 PUSH	 EDI
2   970	0000046E  53				 PUSH	 EBX
2   971	0000046F  0B C9						 or	 ecx, ecx			 ; aWidth = 0?
1   972	00000471  0F 84	0000010F				 jz	 @@Exit
1   973	00000477  83 7D	18 00					 cmp	 aHeight, 0			 ; aHeight = 0?
1   974	0000047B  0F 84	00000105				 je	 @@Exit
1   975
1   976	00000481  8B FA						 mov	 edi, edx
1   977	00000483  8B F0						 mov	 esi, eax
1   978
1   979	00000485  89 4D	FC					 mov	 PixelCount, ecx		 ; save	this for later
1   980	00000488  29 4D	10					 sub	 WidthSource, ecx		 ; bias	these
1   981	0000048B  29 4D	0C					 sub	 WidthDest, ecx
1   982
1   983	0000048E  33 C0						 xor	 eax, eax
1   984	00000490  8A 55	14					 mov	 dl, byte ptr Transparent
1   985
    986
    987	00000493  C1 E1	02					 shl	 ecx, 2
    988	00000496  29 4D	0C					 sub	 WidthDest, ecx
    989	00000499  8B 5D	08					 mov	 ebx, Info
    990	0000049C  0B DB						 or	 ebx, ebx
    991	0000049E  0F 84	000000E2				 jz	 @@Exit
    992
    993								 BltTrans8 BltCopySourceCTT24Write, 3
1   994
1   995	000004A4				 @@MoreLines:
1   996	000004A4  8B 4D	FC					 mov	 ecx, PixelCount  ; ECX	is pixel counter
1   997	000004A7  C1 E9	02					 shr	 ecx, 2
1   998	000004AA  0F 84	00000098				 jz	 @@NextScan
1   999
1  1000								 AlignTo 16
Turbo Assembler	 Version 5.0	    03-11-98 03:16:12	    Page 5
E:\JRG\Source\Utils\Graphics\bitblt24.asm



2  1001
2  1002								 ; ( $ + 16 - 1	) and not (16 -	1)
2  1003
1  1004	000004B0				 @@Same:
1  1005	000004B0  8A 06						 mov	 al, [esi]
1  1006	000004B2  3A C2						 cmp	 al, dl
1  1007	000004B4  75 39	90 90 90 90				 jne	 @@Diff0
1  1008	000004BA				 @@Same0:
1  1009	000004BA  8A 46	01					 mov	 al, [esi + 1]
1  1010	000004BD  3A C2						 cmp	 al, dl
1  1011	000004BF  75 43	90 90 90 90				 jne	 @@Diff1
1  1012	000004C5				 @@Same1:
1  1013	000004C5  8A 46	02					 mov	 al, [esi + 2]
1  1014	000004C8  3A C2						 cmp	 al, dl
1  1015	000004CA  75 4E	90 90 90 90				 jne	 @@Diff2
1  1016	000004D0				 @@Same2:
1  1017	000004D0  8A 46	03					 mov	 al, [esi + 3]
1  1018	000004D3  3A C2						 cmp	 al, dl
1  1019	000004D5  75 59	90 90 90 90				 jne	 @@Diff3
1  1020	000004DB				 @@Same3:
1  1021	000004DB  83 C7	0C					 add	 edi, 3	* 4
1  1022	000004DE  83 C6	04					 add	 esi, 4
1  1023	000004E1  49						 dec	 ecx
1  1024	000004E2  75 CC						 jnz	 @@Same
1  1025	000004E4  EB 62	90 90 90				 jmp	 @@NextScan
1  1026
1  1027								 AlignTo 16
2  1028
2  1029								 ; ( $ + 16 - 1	) and not (16 -	1)
2  1030
1  1031	000004E9				 @@Diff:
1  1032	000004E9  8A 06						 mov	 al, [esi]
1  1033	000004EB  3A C2						 cmp	 al, dl
1  1034	000004ED  74 CB						 je	 @@Same0
1  1035	000004EF				 @@Diff0:
1  1036								 BltCopySourceCTT24Write 0
2  1037
2  1038	000004EF  8B 04	83					 mov	 eax, [ebx + eax * 4]
2  1039	000004F2  66| 89 07					 mov	 [edi +	(0) * 3], ax
2  1040	000004F5  C1 E8	10					 shr	 eax, 16
2  1041	000004F8  88 47	02					 mov	 [edi +	(0) * 3	+ 2], al
2  1042	000004FB  33 C0						 xor	 eax, eax
2  1043
1  1044	000004FD  8A 46	01					 mov	 al, [esi + 1]
1  1045	00000500  3A C2						 cmp	 al, dl
1  1046	00000502  74 C1						 je	 @@Same1
1  1047	00000504				 @@Diff1:
1  1048								 BltCopySourceCTT24Write 1
2  1049
2  1050	00000504  8B 04	83					 mov	 eax, [ebx + eax * 4]
2  1051	00000507  66| 89 47 03					 mov	 [edi +	(1) * 3], ax
2  1052	0000050B  C1 E8	10					 shr	 eax, 16
2  1053	0000050E  88 47	05					 mov	 [edi +	(1) * 3	+ 2], al
2  1054	00000511  33 C0						 xor	 eax, eax
2  1055
1  1056	00000513  8A 46	02					 mov	 al, [esi + 2]
1  1057	00000516  3A C2						 cmp	 al, dl
1  1058	00000518  74 B6						 je	 @@Same2
1  1059	0000051A				 @@Diff2:
1  1060								 BltCopySourceCTT24Write 2
2  1061
2  1062	0000051A  8B 04	83					 mov	 eax, [ebx + eax * 4]
2  1063	0000051D  66| 89 47 06					 mov	 [edi +	(2) * 3], ax
2  1064	00000521  C1 E8	10					 shr	 eax, 16
2  1065	00000524  88 47	08					 mov	 [edi +	(2) * 3	+ 2], al
2  1066	00000527  33 C0						 xor	 eax, eax
2  1067
1  1068	00000529  8A 46	03					 mov	 al, [esi + 3]
1  1069	0000052C  3A C2						 cmp	 al, dl
1  1070	0000052E  74 AB						 je	 @@Same3
1  1071	00000530				 @@Diff3:
1  1072								 BltCopySourceCTT24Write 3
2  1073
2  1074	00000530  8B 04	83					 mov	 eax, [ebx + eax * 4]
2  1075	00000533  66| 89 47 09					 mov	 [edi +	(3) * 3], ax
2  1076	00000537  C1 E8	10					 shr	 eax, 16
2  1077	0000053A  88 47	0B					 mov	 [edi +	(3) * 3	+ 2], al
2  1078	0000053D  33 C0						 xor	 eax, eax
2  1079
1  1080
1  1081	0000053F  83 C7	0C					 add	 edi, 3	* 4
1  1082	00000542  83 C6	04					 add	 esi, 4
1  1083	00000545  49						 dec	 ecx
1  1084	00000546  75 A1						 jnz	 @@Diff
1  1085
1  1086	00000548				 @@NextScan:
1  1087	00000548  8B 4D	FC					 mov	 ecx, PixelCount
1  1088	0000054B  81 E1	00000003				 and	 ecx, 11b
1  1089	00000551  74 24	90 90 90 90				 jz	 @@NextScan1			 ; move	on to the start	of the next line
1  1090
1  1091	00000557				 @@OddLoop:
1  1092	00000557  8A 06						 mov	 al, [esi]
1  1093						 IF 3 EQ 1
1  1094								 inc	 edi
1  1095						 ELSE
1  1096	00000559  83 C7	03					 add	 edi, 3
1  1097						 ENDIF
1  1098	0000055C  46						 inc	 esi
1  1099	0000055D  3A C2						 cmp	 al, dl
1  1100	0000055F  74 13	90 90 90 90				 je	 @@OddCont
1  1101								 BltCopySourceCTT24Write -1
2  1102
2  1103	00000565  8B 04	83					 mov	 eax, [ebx + eax * 4]
2  1104	00000568  66| 89 47 FD					 mov	 [edi +	(-1) * 3], ax
2  1105	0000056C  C1 E8	10					 shr	 eax, 16
2  1106	0000056F  88 47	FF					 mov	 [edi +	(-1) * 3 + 2], al
2  1107	00000572  33 C0						 xor	 eax, eax
2  1108
1  1109	00000574				 @@OddCont:
1  1110	00000574  49						 dec	 ecx
1  1111	00000575  75 E0						 jnz	 @@OddLoop
1  1112	00000577				 @@NextScan1:
1  1113	00000577  03 75	10					 add	 esi, WidthSource
1  1114	0000057A  03 7D	0C					 add	 edi, WidthDest
1  1115
1  1116	0000057D  FF 4D	18					 dec	 aHeight			 ; line	counter
1  1117	00000580  0F 85	FFFFFF1E				 jnz	 @@MoreLines
1  1118
   1119	00000586				 @@Exit:
1  1120	00000586  5B				 POP	 EBX
1  1121	00000587  5F				 POP	 EDI
1  1122	00000588  5E				 POP	 ESI
1  1123	00000589  C9				 LEAVED
1  1124	0000058A  C2 0014			 RET	 00014h
   1125
   1126	0000058D			 BltCopySourceCTT24	 ENDP
   1127
   1128	0000058D			 BltCopyGlassedCTT24	 PROC PASCAL USES ESI EDI EBX, \ ; Source, Dest	: ptr byte, aWidth,
   1129									 aHeight : dword, Transparent :	dword, \
   1130									 WidthSource, WidthDest	: dword, Info :	ptr word
   1131					 ;
   1132					 ;     On entry:
   1133					 ;
   1134					 ;     EAX: Source
   1135					 ;     EDX: Dest
   1136					 ;     ECX: aWidth
   1137					 ;
   1138
   1139								 LOCAL	 PixelCount : dword
   1140
   1141					 BltGlassCTT24Write	 macro	 Indx:REQ
   1142								 endm
   1143
   1144								 BltInit8
1  1145
2  1146	0000058D  C8 0004 00			 ENTERD	 00004h,0
2  1147	00000591  56				 PUSH	 ESI
2  1148	00000592  57				 PUSH	 EDI
2  1149	00000593  53				 PUSH	 EBX
2  1150	00000594  0B C9						 or	 ecx, ecx			 ; aWidth = 0?
1  1151	00000596  0F 84	000000C2				 jz	 @@Exit
1  1152	0000059C  83 7D	18 00					 cmp	 aHeight, 0			 ; aHeight = 0?
1  1153	000005A0  0F 84	000000B8				 je	 @@Exit
1  1154
1  1155	000005A6  8B FA						 mov	 edi, edx
1  1156	000005A8  8B F0						 mov	 esi, eax
1  1157
1  1158	000005AA  89 4D	FC					 mov	 PixelCount, ecx		 ; save	this for later
1  1159	000005AD  29 4D	10					 sub	 WidthSource, ecx		 ; bias	these
1  1160	000005B0  29 4D	0C					 sub	 WidthDest, ecx
1  1161
1  1162	000005B3  33 C0						 xor	 eax, eax
1  1163	000005B5  8A 55	14					 mov	 dl, byte ptr Transparent
1  1164
   1165
   1166	000005B8  29 4D	0C					 sub	 WidthDest, ecx
   1167	000005BB  8B 5D	08					 mov	 ebx, Info
   1168	000005BE  0B DB						 or	 ebx, ebx
   1169	000005C0  0F 84	00000098				 jz	 @@Exit
   1170
   1171								 BltTrans8 BltGlassCTT24Write, 2
1  1172
1  1173	000005C6				 @@MoreLines:
1  1174	000005C6  8B 4D	FC					 mov	 ecx, PixelCount  ; ECX	is pixel counter
1  1175	000005C9  C1 E9	02					 shr	 ecx, 2
1  1176	000005CC  74 61	90 90 90 90				 jz	 @@NextScan
1  1177
1  1178								 AlignTo 16
2  1179
2  1180								 ; ( $ + 16 - 1	) and not (16 -	1)
2  1181
1  1182	000005D2				 @@Same:
1  1183	000005D2  8A 06						 mov	 al, [esi]
1  1184	000005D4  3A C2						 cmp	 al, dl
1  1185	000005D6  75 39	90 90 90 90				 jne	 @@Diff0
1  1186	000005DC				 @@Same0:
1  1187	000005DC  8A 46	01					 mov	 al, [esi + 1]
1  1188	000005DF  3A C2						 cmp	 al, dl
1  1189	000005E1  75 35	90 90 90 90				 jne	 @@Diff1
1  1190	000005E7				 @@Same1:
1  1191	000005E7  8A 46	02					 mov	 al, [esi + 2]
1  1192	000005EA  3A C2						 cmp	 al, dl
1  1193	000005EC  75 31	90 90 90 90				 jne	 @@Diff2
1  1194	000005F2				 @@Same2:
1  1195	000005F2  8A 46	03					 mov	 al, [esi + 3]
1  1196	000005F5  3A C2						 cmp	 al, dl
1  1197	000005F7  75 2D	90 90 90 90				 jne	 @@Diff3
1  1198	000005FD				 @@Same3:
1  1199	000005FD  83 C7	08					 add	 edi, 2	* 4
1  1200	00000600  83 C6	04					 add	 esi, 4
1  1201	00000603  49						 dec	 ecx
1  1202	00000604  75 CC						 jnz	 @@Same
1  1203	00000606  EB 27	90 90 90				 jmp	 @@NextScan
1  1204
1  1205								 AlignTo 16
2  1206
2  1207								 ; ( $ + 16 - 1	) and not (16 -	1)
2  1208
1  1209	0000060B				 @@Diff:
1  1210	0000060B  8A 06						 mov	 al, [esi]
1  1211	0000060D  3A C2						 cmp	 al, dl
1  1212	0000060F  74 CB						 je	 @@Same0
1  1213	00000611				 @@Diff0:
1  1214								 BltGlassCTT24Write 0
1  1215	00000611  8A 46	01					 mov	 al, [esi + 1]
1  1216	00000614  3A C2						 cmp	 al, dl
1  1217	00000616  74 CF						 je	 @@Same1
1  1218	00000618				 @@Diff1:
1  1219								 BltGlassCTT24Write 1
1  1220	00000618  8A 46	02					 mov	 al, [esi + 2]
1  1221	0000061B  3A C2						 cmp	 al, dl
1  1222	0000061D  74 D3						 je	 @@Same2
1  1223	0000061F				 @@Diff2:
1  1224								 BltGlassCTT24Write 2
1  1225	0000061F  8A 46	03					 mov	 al, [esi + 3]
1  1226	00000622  3A C2						 cmp	 al, dl
1  1227	00000624  74 D7						 je	 @@Same3
1  1228	00000626				 @@Diff3:
1  1229								 BltGlassCTT24Write 3
1  1230
1  1231	00000626  83 C7	08					 add	 edi, 2	* 4
1  1232	00000629  83 C6	04					 add	 esi, 4
1  1233	0000062C  49						 dec	 ecx
1  1234	0000062D  75 DC						 jnz	 @@Diff
1  1235
1  1236	0000062F				 @@NextScan:
1  1237	0000062F  8B 4D	FC					 mov	 ecx, PixelCount
1  1238	00000632  81 E1	00000003				 and	 ecx, 11b
1  1239	00000638  74 15	90 90 90 90				 jz	 @@NextScan1			 ; move	on to the start	of the next line
1  1240
1  1241	0000063E				 @@OddLoop:
1  1242	0000063E  8A 06						 mov	 al, [esi]
1  1243						 IF 2 EQ 1
1  1244								 inc	 edi
1  1245						 ELSE
1  1246	00000640  83 C7	02					 add	 edi, 2
1  1247						 ENDIF
1  1248	00000643  46						 inc	 esi
1  1249	00000644  3A C2						 cmp	 al, dl
1  1250	00000646  74 04	90 90 90 90				 je	 @@OddCont
Turbo Assembler	 Version 5.0	    03-11-98 03:16:12	    Page 6
E:\JRG\Source\Utils\Graphics\bitblt24.asm



1  1251								 BltGlassCTT24Write -1
1  1252	0000064C				 @@OddCont:
1  1253	0000064C  49						 dec	 ecx
1  1254	0000064D  75 EF						 jnz	 @@OddLoop
1  1255	0000064F				 @@NextScan1:
1  1256	0000064F  03 75	10					 add	 esi, WidthSource
1  1257	00000652  03 7D	0C					 add	 edi, WidthDest
1  1258
1  1259	00000655  FF 4D	18					 dec	 aHeight			 ; line	counter
1  1260	00000658  0F 85	FFFFFF68				 jnz	 @@MoreLines
1  1261
   1262	0000065E				 @@Exit:
1  1263	0000065E  5B				 POP	 EBX
1  1264	0000065F  5F				 POP	 EDI
1  1265	00000660  5E				 POP	 ESI
1  1266	00000661  C9				 LEAVED
1  1267	00000662  C2 0014			 RET	 00014h
   1268
   1269	00000665			 BltCopyGlassedCTT24	 ENDP
   1270
   1271								 END
Turbo Assembler	 Version 5.0	    03-11-98 03:16:12	    Page 7
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "03-11-98"
??FILENAME			  Text	 "bitblt24"
??TIME				  Text	 "03:16:12"
??VERSION			  Number 0500
@32BIT				  Text	 1
@@DIFF				  Near32 FLAT:008D
@@DIFF				  Near32 FLAT:01C6
@@DIFF				  Near32 FLAT:0301
@@DIFF				  Near32 FLAT:04E9
@@DIFF				  Near32 FLAT:060B
@@DIFF0				  Near32 FLAT:0098
@@DIFF0				  Near32 FLAT:01D1
@@DIFF0				  Near32 FLAT:030C
@@DIFF0				  Near32 FLAT:04EF
@@DIFF0				  Near32 FLAT:0611
@@DIFF1				  Near32 FLAT:00AD
@@DIFF1				  Near32 FLAT:01E6
@@DIFF1				  Near32 FLAT:0343
@@DIFF1				  Near32 FLAT:0504
@@DIFF1				  Near32 FLAT:0618
@@DIFF2				  Near32 FLAT:00C3
@@DIFF2				  Near32 FLAT:01FC
@@DIFF2				  Near32 FLAT:0380
@@DIFF2				  Near32 FLAT:051A
@@DIFF2				  Near32 FLAT:061F
@@DIFF3				  Near32 FLAT:00D9
@@DIFF3				  Near32 FLAT:0212
@@DIFF3				  Near32 FLAT:03BD
@@DIFF3				  Near32 FLAT:0530
@@DIFF3				  Near32 FLAT:0626
@@EXIT				  Near32 FLAT:0133
@@EXIT				  Near32 FLAT:026C
@@EXIT				  Near32 FLAT:0461
@@EXIT				  Near32 FLAT:0586
@@EXIT				  Near32 FLAT:065E
@@MORELINES			  Near32 FLAT:0034
@@MORELINES			  Near32 FLAT:016D
@@MORELINES			  Near32 FLAT:02A8
@@MORELINES			  Near32 FLAT:04A4
@@MORELINES			  Near32 FLAT:05C6
@@NEXTSCAN			  Near32 FLAT:00EC
@@NEXTSCAN			  Near32 FLAT:0225
@@NEXTSCAN			  Near32 FLAT:03F7
@@NEXTSCAN			  Near32 FLAT:0548
@@NEXTSCAN			  Near32 FLAT:062F
@@NEXTSCAN1			  Near32 FLAT:00FB
@@NEXTSCAN1			  Near32 FLAT:0234
@@NEXTSCAN1			  Near32 FLAT:0406
@@NEXTSCAN1			  Near32 FLAT:0577
@@NEXTSCAN1			  Near32 FLAT:064F
@@ODDCONT			  Near32 FLAT:012E
@@ODDCONT			  Near32 FLAT:0267
@@ODDCONT			  Near32 FLAT:045C
@@ODDCONT			  Near32 FLAT:0574
@@ODDCONT			  Near32 FLAT:064C
@@ODDLOOP			  Near32 FLAT:010F
@@ODDLOOP			  Near32 FLAT:0248
@@ODDLOOP			  Near32 FLAT:041A
@@ODDLOOP			  Near32 FLAT:0557
@@ODDLOOP			  Near32 FLAT:063E
@@SAME				  Near32 FLAT:0040
@@SAME				  Near32 FLAT:0179
@@SAME				  Near32 FLAT:02B4
@@SAME				  Near32 FLAT:04B0
@@SAME				  Near32 FLAT:05D2
@@SAME0				  Near32 FLAT:004F
@@SAME0				  Near32 FLAT:0188
@@SAME0				  Near32 FLAT:02C3
@@SAME0				  Near32 FLAT:04BA
@@SAME0				  Near32 FLAT:05DC
@@SAME1				  Near32 FLAT:005F
@@SAME1				  Near32 FLAT:0198
@@SAME1				  Near32 FLAT:02D3
@@SAME1				  Near32 FLAT:04C5
@@SAME1				  Near32 FLAT:05E7
@@SAME2				  Near32 FLAT:006F
@@SAME2				  Near32 FLAT:01A8
@@SAME2				  Near32 FLAT:02E3
@@SAME2				  Near32 FLAT:04D0
@@SAME2				  Near32 FLAT:05F2
@@SAME3				  Near32 FLAT:007F
@@SAME3				  Near32 FLAT:01B8
@@SAME3				  Near32 FLAT:02F3
@@SAME3				  Near32 FLAT:04DB
@@SAME3				  Near32 FLAT:05FD
@CODE				  Text	 FLAT
@CODESIZE			  Text	 0
@CPU				  Text	 4853H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 FLAT
@DATASIZE			  Text	 0
@FILENAME			  Text	 BITBLT24
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 FLAT
@WORDSIZE			  Text	 4
AHEIGHT				  Number [FLAT:EBP+0018]
BLTCOPYGLASSED24		  Near32 FLAT:0272
BLTCOPYGLASSEDCTT24		  Near32 FLAT:058D
BLTCOPYSHADED24			  Near32 FLAT:013A
BLTCOPYSOURCECTT24		  Near32 FLAT:0468
BLTCOPYTRANS24			  Near32 FLAT:0000
INFO				  Number [FLAT:EBP+0008]
LIGHTSHADECOLOR			  Number 006E
MSKCOLORKEY			  Text	 00ffffffh
PIXELCOUNT			  Number [FLAT:EBP-0004]
TRANSPARENT			  Number [FLAT:EBP+0014]
WIDTHDEST			  Number [FLAT:EBP+000C]
WIDTHSOURCE			  Number [FLAT:EBP+0010]

Macro Name

ALIGNTO
BLTCOPYGLASSED24WRITE
BLTCOPYSHADED24WRITE
BLTCOPYSOURCECTT24WRITE
BLTCOPYTRANS24WRITE
BLTGLASSCTT24WRITE
BLTINIT24
BLTINIT8
BLTOPAQUE
BLTTRANS24
BLTTRANS8

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  32  0000 Dword  Public  DATA
FLAT				  Group
_TEXT				  32  0665 Dword  Public  CODE
